#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 1024
#define HEIGHT 1024
#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(std140, binding = 0) buffer buf
{
   vec4 imageData[];
};

const int MAX_ITERATIONS = 512;

// http://iquilezles.org/www/articles/palettes/palettes.htm
vec4 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d)
{
    vec3 color = a + b * cos(6.28318 * (c * t + d));
    return vec4(color, 1.0);
}

void main() 
{
  if (gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
  {
    return;
  }

  float x = float(gl_GlobalInvocationID.x) / float(WIDTH);
  float y = float(gl_GlobalInvocationID.y) / float(HEIGHT);

  vec2 uv = vec2(x, y);
  float n = 0.0;
  vec2 c = vec2(-0.5, 0.0) + (uv - 0.5) * (2.0); // Sets the position of the fractal
  vec2 z = vec2(0.0);
  // https://www.alanzucconi.com/2016/08/23/fractals-101-mandelbrot/
  for (int i = 0; i < MAX_ITERATIONS; i++)
  {
    z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
    if (dot(z, z) > 2.0) 
    {
      break;
    }
    ++n;
  }
  
  float t = float(n) / float(MAX_ITERATIONS);
  vec4 color = palette(t, vec3(0.3, 0.3, 0.5), vec3(-0.2, -0.2, -0.5), vec3(1.1, 1.0, 3.0), vec3(0.0, 0.1, 0.2));
          
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x] = color;
}